; PlatformIO Project Configuration File
;
;   Build options: build flags, source filter
;   Upload options: custom upload port, speed and extra flags
;   Library options: dependencies, extra library storages
;   Advanced options: extra scripting
;
; Please visit documenation for the other options and examples
; https://docs.platformio.org/page/projectconf.html
;
; There are numerous configurations of NightDriver that can be built here.  For example, the
; simplest is the DEMO config.  The HUB75 matrix project is the mesermizer.  You simply set
; default_envs to the project you wish to build.  There are project configs for various different
; NightDriver projects ranging from WiFi LED Strip to the simple lantern candle:
;
; demo          Simple WS2812B strip controller, runs a rainbow on PIN 5
; ledstrip      Waits for color data over wifi, so used for home displays, etc
; spectrum      M5StickCPlus project, a spectrum analyzer, on 48x16 WS2812B matrix
; mesmerizer    HUB75 info panel with audio effects, weather, info, etc,

[platformio]
default_envs = insulators
build_cache_dir = .pio/build_cache
extra_configs =
    custom_*.ini ; This file can be created in the root directory to store user defined devices and environments.

; ==================
; Base configuration
;
; Options that are used (or extended) in all device sections (and hence environments) are defined here

[base]
upload_port     =
monitor_port    =
build_type      = release
upload_speed    = 2000000
monitor_speed   = 115200
build_flags     = -std=gnu++2a
                  -g3
                  -Ofast
                  -ffunction-sections
                  -fdata-sections

build_src_flags = -Wformat=2                        ; Warnings for our code only, excluding libraries
                  -Wformat-truncation
                  -Wstack-usage=4096

# Exclude libraries that we don't control from 'pio check'.
# format is error number(optional :path_with_wildcards(optional :line_number))
check_flags     = cppcheck: --suppress=*:*src/uzlib/src/*

lib_deps        = crankyoldgit/IRremoteESP8266  @ ^2.8.6
                  fastled/FastLED               @ ^3.10.1
                  adafruit/Adafruit BusIO       @ ^1.17.2
                  adafruit/Adafruit GFX Library @ ^1.12.1
                  olikraus/U8g2                 @ ^2.36.12
                  kosme/arduinoFFT              @ ^2.0.4
                  esp32async/ESPAsyncWebServer  @ ^3.7.10
                  bblanchon/ArduinoJson         @ ^7.4.2
                  thomasfredericks/Bounce2      @ ^2.72.0
                  https://github.com/PlummersSoftwareLLC/RemoteDebug
                  QRCode                        @ ^0.0.1
                  Bodmer/TJpg_Decoder           @ ^1.1.0
                  plageoj/UrlEncode             @ ^1.0.1

; This partition table is the default and fits everything in 4M of flash without OTA.
board_build.partitions = config/partitions_custom_noota.csv



; =================================
; Build flags for enabling a remote
;
; You can set these here once to match your setup; they are then included in all environments
; that are configured to be used with a remote.

[remote_flags]
build_flags     = -D_IR_ENABLE_DEFAULT_=false       ; Don't automatically include every remote control decoder
                  -DDECODE_NEC=true                 ; Enable whichever you need for your remote.  Try not disabling
                                                    ; above to figure out which it is.

; ===============
; Device sections
;
; Sections starting with "dev_" contain general settings for a particular type of device.
; They extend the "base" config, both in general and in terms of build flags and dependencies,
; where applicable.

[dev_esp32]
extends         = base
board           = esp32dev
monitor_speed   = 115200
upload_speed    = 921600

[dev_esp32_s3]
extends         = base
board           = esp32-s3-devkitc-1
board_build.mcu = esp32s3
board_build.f_cpu = 240000000L
monitor_speed   = 115200
upload_speed    = 1000000
build_flags     = ${base.build_flags}

[dev_adafruit_feather]
extends         = dev_esp32_s3
board           = adafruit_feather_esp32s3_tft
monitor_speed   = 115200
upload_speed    = 1500000
lib_deps        = ${dev_esp32_s3.lib_deps}
                  bodmer/TFT_eSPI @ ^2.5.43
build_flags     = ${dev_esp32_s3.build_flags}
                  -DUSE_SCREEN=1
                  -DUSE_TFTSPI=1
                  -DUSER_SETUP_LOADED
                  -DTOUCH_CS=0
                  -DST7789_2_DRIVER
                  -DTFT_WIDTH=135
                  -DTFT_HEIGHT=240
                  -DTFT_BL=45
                  -DTFT_BACKLIGHT_ON=HIGH
                  -DTFT_RGB_ORDER=TFT_RGB
                  -DTFT_CS=7
                  -DTFT_DC=39
                  -DTFT_RST=40
                  -DTFT_MOSI=35
                  -DTFT_MISO=37
                  -DTFT_SCLK=36
                  -DLOAD_GLCD=1
                  -DSPI_FREQUENCY=27000000
                  -DESP32FEATHERTFT=1
                  -DTOGGLE_BUTTON_1=0
                  -DUSE_HSPI_PORT=1
                  -DNUM_INFO_PAGES=1

[dev_heltec_wifi]
extends         = base
board           = heltec_wifi_kit_32
monitor_speed   = 115200
upload_speed    = 921600
build_flags     = -DUSE_SCREEN=1
                  -DARDUINO_HELTEC_WIFI_KIT_32=1
                  ${base.build_flags}

[dev_heltec_wifi_v2]
extends         = dev_heltec_wifi
board           = heltec_wifi_kit_32_v2
build_flags     = -DARDUINO_HELTEC_WIFI_KIT_32_V2=1
                  -DUSE_SSD1306=1
                  ${dev_heltec_wifi.build_flags}
lib_deps        = ${dev_heltec_wifi.lib_deps}
                  heltecautomation/Heltec ESP32 Dev-Boards @ ^1.1.1

[dev_heltec_wifi_v3]
extends         = dev_esp32_s3
board           = heltec_wifi_kit_32_V3
build_flags     = -DUSE_SCREEN=1
                  -DARDUINO_HELTEC_WIFI_KIT_32=1
                  -DARDUINO_HELTEC_WIFI_KIT_32_V3=1
                  -DUSE_SSD1306=1
                  ${dev_esp32_s3.build_flags}
lib_deps        = ${dev_esp32_s3.lib_deps}
                  heltecautomation/Heltec ESP32 Dev-Boards @ ^1.1.1

[dev_heltec_wifi_lora_v3]
extends         = dev_esp32_s3
board           = heltec_wifi_lora_32_V3
build_flags     = -DUSE_SCREEN=1
                  -DARDUINO_HELTEC_WIFI_KIT_32=1
                  -DARDUINO_HELTEC_WIFI_LORA_32_V3=1
                  -DUSE_SSD1306=1
                  ${dev_esp32_s3.build_flags}
lib_deps        = ${dev_esp32_s3.lib_deps}
                  heltecautomation/Heltec ESP32 Dev-Boards @ ^1.1.1

[dev_lolin_d32_pro]
extends         = base
board           = lolin_d32_pro
monitor_speed   = 115200
upload_speed    = 921600

[dev_m5]
extends         = base
monitor_speed   = 115200
upload_speed    = 1500000
build_flags     = -DUSE_SCREEN=1
                  ${base.build_flags}
lib_deps        = ${base.lib_deps}
                  m5stack/M5Unified @ ^0.1.17

[dev_m5stick_c]
extends         = dev_m5
board           = m5stick-c
build_flags     = -DM5STICKC=1
                  ${dev_m5.build_flags}

[dev_m5stick_c_plus]
extends         = dev_m5
board           = m5stick-c                         ; Requires the M5StickC Plus (note the Plus)
build_flags     = -DM5STICKCPLUS=1
                  ${dev_m5.build_flags}

[dev_m5stick_c_plus2]
extends         = dev_m5
board           = m5stick-c                         ; Requires the M5StickC Plus2 (note the Plus2)
upload_speed    = 2000000

build_flags     = -DM5STICKCPLUS2=1
                  ${dev_m5.build_flags}
                  ${psram_flags.build_flags}
board_build.partitions = config/partitions_custom_8M.csv
board_upload.flash_size = 8MB

[dev_m5stack]
extends         = dev_m5
board           = m5stack-core2
build_flags     = -DM5STACKCORE2=1
                  ${dev_m5.build_flags}
                  ${psram_flags.build_flags}
board_build.partitions = config/partitions_custom_8M.csv
board_upload.flash_size = 8MB

[dev_elecrow_mesmerizer]
extends         = dev_esp32_s3
board           = esp32-s3-devkitc-1
monitor_speed   = 115200
upload_speed    = 1500000
lib_deps        = ${dev_esp32_s3.lib_deps}
                  lovyan03/LovyanGFX @ ^1.1.7
build_flags     = ${dev_esp32_s3.build_flags}

[dev_tinypico]
extends         = base
board           = tinypico
monitor_speed   = 115200
upload_speed    = 1500000

[dev_wrover]
extends         = base
board           = esp-wrover-kit
monitor_speed   = 115200
upload_speed    = 1500000
lib_deps        = ${base.lib_deps}
                  adafruit/Adafruit ILI9341 @ ^1.5.10

[dev_mesmerizer]
extends         = dev_wrover
board           = esp-wrover-kit
upload_speed    = 2000000
monitor_speed   = 115200
board_build.partitions  = config/partitions_custom_8M.csv
board_upload.flash_size = 8MB

[dev_lilygo_tdisplay_s3]
extends         = dev_esp32_s3
board           = esp32-s3-devkitc-1
build_flags     = -DLILYGOTDISPLAYS3=1
                  -DPIN_SDA=21
                  -DTOGGLE_BUTTON_1=0
                  -DTOGGLE_BUTTON_2=14
                  ${dev_esp32_s3.build_flags}


[dev_lilygo_amoled]

extends        = dev_esp32_s3
board          = lilygo-t-amoled
monitor_speed  = 115200
upload_speed   = 1500000
build_flags    = ${dev_esp32_s3.build_flags}
                 -DLILYGO_TDISPLAY_AMOLED_SERIES=1
                 -DARDUINO_USB_CDC_ON_BOOT=1
                 -DAMOLED_S3=1
                 -DUSE_SCREEN=1
                 -DTOGGLE_BUTTON_1=21
                 -DTOGGLE_BUTTON_2=0
                 -DNUM_INFO_PAGES=2
                 -DLED_PIN0=2
                 -DLV_CONF_PATH="../../../../include/amoled/lv_conf.h"
                 -DLV_CONF_INCLUDE_SIMPLE
                 ${psram_flags.build_flags}
lib_deps       = ${dev_esp32_s3.lib_deps}
                  lewisxhe/SensorLib @ ^0.1.4
                  lewisxhe/XPowersLib @ ^0.2.1
                  https://github.com/lvgl/lvgl.git#release/v8.3
                  ${base.lib_deps}

; ===================
; Capability sections
;
; The following sections contain build flags and/or dependencies to enable a particular capability
; or module in specific environments. They applicable option(s) - build_flags, lib_deps or both -
; are included in the environments in question.
;
; Note that these sections do not extend "base", as they are basically feature toggles.


; Build flags for use of PSRAM
[psram_flags]
build_flags     = -DUSE_PSRAM=1
                  -DBOARD_HAS_PSRAM=1
                  -mfix-esp32-psram-cache-issue

; Libs needed to link with a TTGO Module
[ttgo_deps]
lib_deps        = https://github.com/Xinyuan-LilyGO/TTGO-T-Display
                  bodmer/TFT_eSPI @ ^2.5.43

; ================================================================
; Basic environment section, automatically inherited by all others
;

[env]
platform        = platformio/espressif32 @ ^6.12.0
framework       = arduino
build_type      = release
build_unflags   = -std=gnu++11
lib_extra_dirs  = ${PROJECT_DIR}/lib
monitor_filters = esp32_exception_decoder
extra_scripts   = pre:install_intelhex.py
                  pre:tools/bake_site.py
                  post:tools/merge_image.py
board_build.embed_files = site/dist/index.html.gz
                          site/dist/index.js.gz
                          site/dist/favicon.ico.gz
board_build.embed_txtfiles = config/timezones.json

; ================================================================
; Common project configurations
;

[mesmerizer_config]
build_flags     = -DMESMERIZER=1
                  -DUSE_HUB75=1
                  -DSHOW_VU_METER=1
                  -DEFFECTS_FULL=1
                  ${psram_flags.build_flags}
                  ${remote_flags.build_flags}

lib_deps        = https://github.com/PlummersSoftwareLLC/SmartMatrix.git
                  https://github.com/PlummersSoftwareLLC/GifDecoder.git
                  bitbank2/AnimatedGIF @ ^1.4.7

board_build.embed_files = assets/bmp/brokenclouds.jpg
                          assets/bmp/brokencloudsnight.jpg
                          assets/bmp/clearsky.jpg
                          assets/bmp/clearnight.jpg
                          assets/bmp/fewclouds.jpg
                          assets/bmp/fewcloudsnight.jpg
                          assets/bmp/lowreslogo.jpg
                          assets/bmp/mist.jpg
                          assets/bmp/mistnight.jpg
                          assets/bmp/rain.jpg
                          assets/bmp/rainnight.jpg
                          assets/bmp/scatteredclouds.jpg
                          assets/bmp/scatteredcloudsnight.jpg
                          assets/bmp/showerrain.jpg
                          assets/bmp/showerrainnight.jpg
                          assets/bmp/snow.jpg
                          assets/bmp/snownight.jpg
                          assets/bmp/thunderstorm.jpg
                          assets/bmp/thunderstormnight.jpg
                          assets/gif/colorsphere.gif
                          assets/gif/atomic.gif
                          assets/gif/pacman.gif
                          assets/gif/threerings.gif
                          assets/gif/banana.gif
                          assets/gif/tesseract.gif
                          assets/gif/firelog.gif
                          assets/gif/nyancat.gif
                          ${env.board_build.embed_files}

; =====================
; Base Board Environments - REMOVED
;
; These intermediate sections have been eliminated. Device sections now include
; their board definitions, and project environments extend dev_* sections directly.

; ====================
; Project Environments
;
; These define specific projects with their base board type, project defines, and effect sets

;=========

[env:demo]
extends         = env, dev_esp32
build_flags     = -DDEMO=1
                  -DEFFECTS_DEMO=1
                  ${dev_esp32.build_flags}
lib_deps        = ${dev_esp32.lib_deps}                  

; This is the basic DEMO project again, but expanded to work on the M5, which means it can draw to
; the built in LCD.  It's made so that you can connect to the small 4-pin connector on the M5,
; so it sends power and ground as well as data on PIN 32.

[env:m5demo]
extends         = env, dev_m5stick_c
build_flags     = -DM5DEMO=1
                  -DEFFECTS_DEMO=1
                  ${dev_m5stick_c.build_flags}
lib_deps        = ${dev_m5stick_c.lib_deps}

; This is largely the same as the m5demo above except it links to the PLUS version of the lib
[env:m5plusdemo]
extends         = env, dev_m5stick_c_plus
build_flags     = -DM5DEMO=1
                  -DEFFECTS_DEMO=1
                  ${dev_m5stick_c_plus.build_flags}
lib_deps        = ${dev_m5stick_c_plus.lib_deps}

[env:pdpwopr]
extends         = env, dev_m5stick_c_plus
build_flags     = -DPDPWOPR=1
                  -DEFFECTS_PDPWOPR=1
                  ${dev_m5stick_c_plus.build_flags}
lib_deps        = ${dev_m5stick_c_plus.lib_deps}

; Also one for the M5Stack Core2
[env:m5stackdemo]
extends         = env, dev_m5stack
build_flags     = -DM5DEMO=1
                  -DEFFECTS_DEMO=1
                  ${dev_m5stack.build_flags}
lib_deps        = ${dev_m5stack.lib_deps}

; Now for the Heltec, with WiFi and webserver enabled
[env:heltecdemo]
extends         = env, dev_heltec_wifi
build_flags     = -DDEMO=1
                  -DEFFECTS_DEMO=1
                  -DENABLE_WIFI=1
                  ${dev_heltec_wifi.build_flags}
lib_deps        = ${dev_heltec_wifi.lib_deps}

; Now for Heltec V2, which has 8M flash
[env:heltecv2demo]
extends         = env, dev_heltec_wifi_v2
build_flags     = -DDEMO=1
                  -DEFFECTS_DEMO=1
                  -DENABLE_WIFI=1
                  ${dev_heltec_wifi_v2.build_flags}
lib_deps        = ${dev_heltec_wifi_v2.lib_deps}

; Heltec V3 board, which is an S3 with USB-C
[env:heltecv3demo]
extends         = env, dev_heltec_wifi_v3
build_flags     = -DDEMO=1
                  -DEFFECTS_DEMO=1
                  -DENABLE_WIFI=1
                  -DROTATE_SCREEN=1
                  ${dev_heltec_wifi_v3.build_flags}
lib_deps        = ${dev_heltec_wifi_v3.lib_deps}

; Heltec LoRa V3 board, which is an S3 with USB-C and LoRa
[env:helteclorav3demo]
extends         = env, dev_heltec_wifi_lora_v3
build_flags     = -DDEMO=1
                  -DEFFECTS_DEMO=1
                  -DENABLE_WIFI=1
                  ${dev_heltec_wifi_lora_v3.build_flags}
lib_deps        = ${dev_heltec_wifi_lora_v3.lib_deps}

; LILYGO T-Display-S3
[env:lilygo-tdisplay-s3-demo]
extends         = env, dev_lilygo_tdisplay_s3
build_flags     = -DDEMO=1
                  -DEFFECTS_DEMO=1
                  -DENABLE_WIFI=1
                  -DUSE_SCREEN=0
                  ${dev_lilygo_tdisplay_s3.build_flags}
lib_deps        = ${dev_lilygo_tdisplay_s3.lib_deps}

[env:demo_amoled]
extends         = env, dev_lilygo_amoled
build_flags     = -DDEMO=1
                  -DEFFECTS_DEMO=1
                  ${dev_lilygo_amoled.build_flags}
lib_deps        = ${dev_lilygo_amoled.lib_deps}

;=============

[env:ledstrip]
extends         = env, dev_heltec_wifi
build_flags     = -DLEDSTRIP=1
                  -DEFFECTS_MINIMAL=1
                  ${dev_heltec_wifi.build_flags}
lib_deps        = ${dev_heltec_wifi.lib_deps}

; ledstrip_feather is based off ledstrip but intended for the ESP32S3 TFT Feather from Adafruit with 2MB PSRAM

[env:ledstrip_feather]
extends         = env, dev_adafruit_feather
build_flags     = -DLEDSTRIP=1
                  -DEFFECTS_MINIMAL=1
                  ${dev_adafruit_feather.build_flags}
                  ${psram_flags.build_flags}
lib_deps        = ${dev_adafruit_feather.lib_deps}

[env:ledstrip_feather_hexagon]
extends         = env, dev_adafruit_feather
build_flags     = -DHEXAGON=1
                  -DEFFECTS_HEXAGON=1
                  ${dev_adafruit_feather.build_flags}
                  ${psram_flags.build_flags}
lib_deps        = ${dev_adafruit_feather.lib_deps}

[env:ledstrip_feather_wrover]
extends         = env, dev_wrover
build_flags     = -DLEDSTRIP=1
                  -DEFFECTS_MINIMAL=1
                  -DUSER_SETUP_LOADED
                  ${psram_flags.build_flags}
                  ${dev_wrover.build_flags}
lib_deps        = ${dev_wrover.lib_deps}
debug_init_break = tbreak setup

[env:ledstriplite]
extends         = env, dev_esp32
build_flags     = -DLEDSTRIP=1
                  -DEFFECTS_MINIMAL=1
                  ${dev_esp32.build_flags}
lib_deps        = ${dev_esp32.lib_deps}

[env:ledstrip_pico]
extends         = env, dev_tinypico
build_flags     = -DLEDSTRIP=1
                  -DEFFECTS_MINIMAL=1
                  ${psram_flags.build_flags}
                  ${dev_tinypico.build_flags}
lib_deps        = ${dev_tinypico.lib_deps}

;=============

[env:spectrum]
extends         = env, dev_m5stick_c_plus
build_flags     = -DSPECTRUM=1
                  -DEFFECTS_SPECTRUM=1
                  -DSHOW_VU_METER=1
                  ${remote_flags.build_flags}
                  ${dev_m5stick_c_plus.build_flags}
lib_deps        = ${dev_m5stick_c_plus.lib_deps}

[env:spectrum2]
extends         = env, dev_m5stick_c_plus2
build_flags     = -DSPECTRUM=1
                  -DEFFECTS_SPECTRUM=1
                  -DSHOW_VU_METER=1
                  ${remote_flags.build_flags}
                  ${dev_m5stick_c_plus2.build_flags}
lib_deps        = ${dev_m5stick_c_plus2.lib_deps}

[env:helmet]
extends         = env, dev_m5stick_c_plus
build_flags     = -DHELMET=1
                  -DEFFECTS_SPECTRUM=1
                  -DSHOW_VU_METER=1
                  ${remote_flags.build_flags}
                  ${dev_m5stick_c_plus.build_flags}
lib_deps        = ${dev_m5stick_c_plus.lib_deps}

[env:spectrum_elecrow]
extends         = env, dev_elecrow_mesmerizer
build_flags     = -DSPECTRUM=1
                  -DEFFECTS_SPECTRUM=1
                  -DSHOW_VU_METER=1
                  -DENABLE_AUDIO=1
                  -DELECROW=1
                  -DUSE_SCREEN=1
                  -DTFT_WIDTH=320
                  -DTFT_HEIGHT=480
                  -DNUM_INFO_PAGES=2
                  ${psram_flags.build_flags}
                  ${remote_flags.build_flags}
                  ${dev_elecrow_mesmerizer.build_flags}
lib_deps        = ${dev_elecrow_mesmerizer.lib_deps}

[env:spectrumstack]
extends         = env, dev_m5stack
build_flags     = -DSPECTRUM=1
                  -DEFFECTS_SPECTRUM=1
                  -DSHOW_VU_METER=1
                  -DLOAD_GFXFF
                  ${psram_flags.build_flags}
                  ${remote_flags.build_flags}
                  ${dev_m5stack.build_flags}
lib_deps        = ${dev_m5stack.lib_deps}

; Same as Spectrum but using a non-Plus M5 Stick (older version with smaller screen)
[env:spectrumlite]
extends         = env, dev_m5stick_c
build_flags     = -DSPECTRUM=1
                  -DEFFECTS_SPECTRUM=1
                  ${remote_flags.build_flags}
                  ${dev_m5stick_c.build_flags}
lib_deps        = ${dev_m5stick_c.lib_deps}

; And again, for the Wrover
[env:spectrum_wrover_kit]
extends         = env, dev_wrover
build_flags     = -DSPECTRUM=1
                  -DEFFECTS_SPECTRUM=1
                  -DUSE_SCREEN=1
                  -DSPECTRUM_WROVER_KIT=1
                  ${remote_flags.build_flags}
                  ${dev_wrover.build_flags}
lib_deps        = ${dev_wrover.lib_deps}
debug_init_break = tbreak setup

;===============

[env:mesmerizer]
extends         = env, dev_mesmerizer
build_flags     = -DMESMERIZER=1
                  -DEFFECTS_MESMERIZER=1
                  ${mesmerizer_config.build_flags}
                  ${dev_mesmerizer.build_flags}
lib_deps        = ${dev_mesmerizer.lib_deps}
                  ${mesmerizer_config.lib_deps}

[env:mesmerizer_lolin]
extends         = env, dev_lolin_d32_pro
build_flags     = -DMESMERIZER=1
                  -DEFFECTS_MESMERIZER=1
                  ${mesmerizer_config.build_flags}
                  ${dev_lolin_d32_pro.build_flags}
lib_deps        = ${dev_lolin_d32_pro.lib_deps}
                  ${mesmerizer_config.lib_deps}

;==============
; Simplified project definitions using base board types + project defines + effect sets

[env:laserline]
extends         = env, dev_m5stick_c_plus
build_flags     = -DLASERLINE=1
                  -DEFFECTS_MINIMAL=1
                  ${remote_flags.build_flags}
                  ${dev_m5stick_c_plus.build_flags}
lib_deps        = ${dev_m5stick_c_plus.lib_deps}

[env:lantern]
extends         = env, dev_m5stick_c
build_flags     = -DLANTERN=1
                  -DEFFECTS_MINIMAL=1
                  ${remote_flags.build_flags}
                  ${dev_m5stick_c.build_flags}
lib_deps        = ${dev_m5stick_c.lib_deps}

[env:pdpgrid]
extends         = env, dev_m5stick_c_plus2
build_flags     = -DPDPGRID=1
                  -DEFFECTS_MINIMAL=1
                  ${remote_flags.build_flags}
                  ${dev_m5stick_c_plus2.build_flags}
lib_deps        = ${dev_m5stick_c_plus2.lib_deps}

[env:chieftain]
extends         = env, dev_tinypico
build_flags     = -DCHIEFTAIN=1
                  -DEFFECTS_MINIMAL=1
                  ${dev_tinypico.build_flags}
lib_deps        = ${dev_tinypico.lib_deps}

[env:umbrella]
extends         = env, dev_esp32
build_flags     = -DUMBRELLA=1
                  -DEFFECTS_MINIMAL=1
                  -DUSE_SCREEN=0
                  ${remote_flags.build_flags}
                  ${dev_esp32.build_flags}
lib_deps        = ${dev_esp32.lib_deps}

[env:generic]
extends         = env, dev_esp32
build_flags     = -DGENERIC=1
                  -DEFFECTS_MINIMAL=1
                  ${dev_esp32.build_flags}
lib_deps        = ${dev_esp32.lib_deps}

[env:ttgo]
extends         = env, dev_esp32
build_flags     = -DTTGO=1
                  -DEFFECTS_MINIMAL=1
                  -DUSE_SCREEN=1
                  ${remote_flags.build_flags}
                  ${dev_esp32.build_flags}
lib_deps        = ${dev_esp32.lib_deps}
                  ${ttgo_deps.lib_deps}

[env:xmastrees]
extends         = env, dev_m5stick_c_plus
build_flags     = -DXMASTREES=1
                  -DEFFECTS_MINIMAL=1
                  ${remote_flags.build_flags}
                  ${dev_m5stick_c_plus.build_flags}
lib_deps        = ${dev_m5stick_c_plus.lib_deps}

[env:insulators]
extends         = env, dev_m5stick_c_plus
build_flags     = -DINSULATORS=1
                  -DEFFECTS_MINIMAL=1
                  ${remote_flags.build_flags}
                  ${dev_m5stick_c_plus.build_flags}
lib_deps        = ${dev_m5stick_c_plus.lib_deps}

[env:magicmirror]
extends         = env, dev_m5stick_c
build_flags     = -DMAGICMIRROR=1
                  -DEFFECTS_MINIMAL=1
                  ${dev_m5stick_c.build_flags}
lib_deps        = ${dev_m5stick_c.lib_deps}

[env:atomlight]
extends         = env, dev_esp32
build_flags     = -DATOMLIGHT=1
                  -DEFFECTS_MINIMAL=1
                  ${dev_esp32.build_flags}
                  -UUSE_SCREEN                      ; Unset USE_SCREEN that is set in the device build flags.
                                                    ; The ATOMLIGHT project really prefers not to use it.
lib_deps        = ${dev_esp32.lib_deps}

[env:spirallamp]
extends         = env, dev_m5stick_c_plus
build_flags     = -DSPIRALLAMP=1
                  -DEFFECTS_MINIMAL=1
                  ${remote_flags.build_flags}
                  ${dev_m5stick_c_plus.build_flags}
lib_deps        = ${dev_m5stick_c_plus.lib_deps}

[env:platecover]
extends         = env, dev_m5stick_c_plus
build_flags     = -DPLATECOVER=1
                  -DEFFECTS_MINIMAL=1
                  -DFASTLED_EXPERIMENTAL_ESP32_RGBW_ENABLED=1
                  -DFASTLED_EXPERIMENTAL_ESP32_RGBW_MODE=kRGBWMaxBrightness
                  -DCOLOR_ORDER=EOrder::BRG
                  -DLEDTYPE=WS2812
                  ${remote_flags.build_flags}
                  ${dev_m5stick_c_plus.build_flags}
lib_deps        = ${dev_m5stick_c_plus.lib_deps}

[env:fanset]
extends         = env, dev_m5stick_c_plus
build_flags     = -DFANSET=1
                  -DEFFECTS_FAN=1
                  ${remote_flags.build_flags}
                  ${dev_m5stick_c_plus.build_flags}
lib_deps        = ${dev_m5stick_c_plus.lib_deps}
monitor_filters = esp32_exception_decoder

[env:cube]
extends         = env, dev_m5stick_c_plus
build_flags     = -DCUBE=1
                  -DEFFECTS_MINIMAL=1
                  ${dev_m5stick_c_plus.build_flags}
lib_deps        = ${dev_m5stick_c_plus.lib_deps}
 