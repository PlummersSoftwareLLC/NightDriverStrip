# NightDriverStrip â€” Minimal Uncrustify config focused on indentation
# Tested with Uncrustify 0.81.x

# --- Core ---
newlines                = auto
input_tab_size          = 4
output_tab_size         = 4
indent_columns          = 4
indent_with_tabs        = 0        # spaces only

# Treat common header extensions as C++ so class/struct rules apply
file_ext CPP .h .hpp .hh .hxx

# --- Indentation of common constructs ---
indent_namespace        = 0        # don't indent namespaces
indent_class            = true     # indent class/struct body by indent_columns (4)
indent_switch_case      = 4        # case labels indented by 4 from switch

# Access specifiers (public:/protected:/private:) must be 2 spaces in from the class brace
# That is, 2 less than member indent (members at +4, access at +2)
indent_access_spec      = -2       # relative to member indent
indent_access_spec_body = false    # keep body at normal member indent; don't override access indent

# --- Preprocessor indentation ---
# 1) Indent preprocessor directives as if they were code (4 per level)
pp_space_after          = add      # "# if" instead of "#if"
pp_indent_at_level      = true     # follow code/block indentation level
pp_indent_count         = 4        # 4 spaces per nesting level
pp_indent               = add      # indent directives inside #if blocks
pp_include_at_level     = true     # indent #include at the current brace level

# 2) Indent code within #if/#else blocks by 4 relative to the directive
pp_if_indent_code       = true
pp_indent_brace         = 1

# Keep the rest at Uncrustify defaults to stay minimal

# --- Lambdas & line width ---
# Indent lambda body by one level
indent_cpp_lambda_body  = true
indent_cpp_lambda_only_once = true

# Keep capture list inline, no extra spaces
sp_cpp_lambda_square    = remove
sp_cpp_lambda_fparen    = remove

# Put the closing parenthesis at body indent (aligns with the indented param line)
indent_paren_close      = 0

# Indent continued function call parameters by one level instead of aligning under '('
indent_func_call_param  = true
indent_param            = 8

# Avoid aggressive wrapping; keep lines wide
code_width              = 200
cmt_width               = 200

# Do not insert a blank line before return statements
nl_before_return        = remove

# Align variable declarations in groups of 3 or more
align_var_def_span      = 3
align_var_def_gap       = 1

# Do not preserve extra spaces beyond what alignment requires
align_keep_extra_space  = false

# Do not use tabs or tab stops for alignment (keeps padding minimal)
align_with_tabs         = false
align_on_tabstop        = false

# Align class/struct member declarations as well
align_var_class_span    = 3
align_var_class_gap     = 1
align_var_struct_span   = 3
align_var_struct_gap    = 1

# Keep pointer/reference with the variable name when aligning
align_var_def_star_style = 1
align_var_def_amp_style  = 1

# --- Newlines for brace/paren combos ---
# Place ')' on the same line as a preceding '}' in function calls (e.g., lambda as arg)
nl_brace_fparen         = remove
sp_brace_fparen         = remove